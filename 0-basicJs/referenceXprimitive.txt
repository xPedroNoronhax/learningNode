primitive values: string, number, boolean, undefined, null, sybol
exemplo:

let name = 'Pedro'
console.log(name) => Pedro que é str e primitive
let secondName = name 
console.log(secondName) => Pedro
se mudar 
name = Henrique
console.log(secondName) => Pedro
Por que?
Quando você faz a atribuição let secondName = name, você está copiando o valor primitivo armazenado em name para secondName. Valores primitivos em JavaScript incluem string, number, boolean, null, undefined, e symbol. Esses valores são armazenados diretamente na variável.

Esse comportamento é diferente de quando você lida com objetos ou arrays em JavaScript, que são tipos de referência. Se você copiar um objeto ou um array para outra variável, ambas as variáveis referenciarão o mesmo objeto ou array na memória. Mudanças feitas em uma dessas referências refletirão na outra.

Conclusão
Primitivos: Quando você copia uma variável primitiva, você está criando uma cópia do valor. Mudanças na cópia não afetam o original e vice-versa.
Referências: Quando você copia uma variável de referência, você está copiando a referência, não o valor. Mudanças no objeto referenciado serão vistas por todas as variáveis que referenciam aquele objeto.